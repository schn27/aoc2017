"use strict";

function calc() {
	const rules = input.split("\n").map(l => l.split(" => "))
		.reduce((m, r) => (m[r[0]] = r[1], m), {});

	let draw = [
		[".", "#", "."], 
		[".", ".", "#"], 
		["#", "#", "#"]
	];

	const part1Iter = 5;
	let part1Draw = draw;

	for (let iter = 0; iter < 18; ++iter) {
		draw = morph(draw, (draw.length % 2) == 0 ? 2 : 3, rules);

		if (iter == part1Iter - 1) {
			part1Draw = draw;
		}
	}

	return countPixels(part1Draw) + " " + countPixels(draw);
}

function countPixels(draw) {
	return draw.reduce((n, r) => n + r.join("").split(".").join("").length, 0);
}

function morph(draw, n, rules) {
	const side = (draw.length / n) * (n + 1);

	let res = [];
	for (let i = 0; i < side; ++i) {
		res.push(new Array(side));
	}

	for (let y = 0; y < draw.length; y += n) {
		for (let x = 0; x < draw.length; x += n) {
			let piece = getPiece(draw, n, x, y);
			putPiece(res, getRule(piece, rules), (x / n) * (n + 1), (y / n) * (n + 1));
		}
	}

	return res;
}

function getPiece(draw, n, x, y) {
	let piece = [];
	for (let yy = 0; yy < n; ++yy) {
		let row = [];

		for (let xx = 0; xx < n; ++xx) {
			row.push(draw[y + yy][x + xx]);
		}

		piece.push(row);
	}

	return piece;
}

function putPiece(draw, piece, x, y) {
	for (let yy = 0; yy < piece.length; ++yy) {
		for (let xx = 0; xx < piece.length; ++xx) {
			draw[y + yy][x + xx] = piece[yy][xx];
		}
	}
}

function getRule(pattern, rules) {
	const p1 = pattern.slice();
	const p2 = rotate(pattern);
	const p3 = rotate(p2);
	const p4 = rotate(p3);
	const p5 = flip(pattern);
	const p6 = rotate(p5);
	const p7 = rotate(p6);
	const p8 = rotate(p7);

	const patterns = [p1, p2, p3, p4, p5, p6, p7, p8];

	for (let i = 0; i < patterns.length; ++i) {
		const key = patterns[i].map(r => r.join("")).join("/");
		if (rules[key] != undefined) {
			return rules[key].split("/").map(r => r.split(""));
		}
	}

	return null;
}

function flip(draw) {
	return draw.map(r => r.slice().reverse());
}

function rotate(draw) {
	let res = [];

	for (let y = 0; y < draw.length; ++y) {
		let row = [];

		for (let x = 0; x < draw.length; ++x) {
			row.push(draw[x][draw.length - y - 1]);
		}

		res.push(row);
	}	

	return res;
}

const input = `../.. => .##/#../..#
#./.. => .##/#../###
##/.. => ..#/#.#/#..
.#/#. => #../#../.#.
##/#. => .#./#../#..
##/## => .##/.../.##
.../.../... => #.#./###./####/#..#
#../.../... => .###/####/##../#.##
.#./.../... => ###./.###/#..#/#.##
##./.../... => ..../..../.#../##..
#.#/.../... => ...#/.##./..../##..
###/.../... => ##../##../##.#/..##
.#./#../... => .#../###./##../####
##./#../... => ####/##.#/..../..##
..#/#../... => ..#./####/...#/#.##
#.#/#../... => #.#./##../##../.##.
.##/#../... => ##../####/..#./...#
###/#../... => #..#/#.#./##.#/#.#.
.../.#./... => .#.#/..#./#.../....
#../.#./... => ##../..##/..##/.#..
.#./.#./... => ..../##../##../#.##
##./.#./... => ...#/##../#..#/.###
#.#/.#./... => ####/##.#/###./..##
###/.#./... => ..../...#/.###/.#..
.#./##./... => #.#./#..#/.##./.#.#
##./##./... => .###/#.../#..#/#.#.
..#/##./... => .###/####/..../#.##
#.#/##./... => ...#/.###/.###/.###
.##/##./... => ..##/..##/.###/##.#
###/##./... => ####/#..#/####/#.#.
.../#.#/... => #.##/..#./.###/#.#.
#../#.#/... => ####/##.#/##.#/....
.#./#.#/... => #.../...#/#.##/#..#
##./#.#/... => .#.#/##../##../....
#.#/#.#/... => ##.#/#.../##../.#..
###/#.#/... => ...#/###./.#.#/...#
.../###/... => .###/#.##/#.../###.
#../###/... => ..##/.#../.###/..#.
.#./###/... => ..../.##./#.##/#.##
##./###/... => .#.#/##.#/#.../#.#.
#.#/###/... => ..#./#.../#.#./.##.
###/###/... => ..##/.#.#/#..#/.##.
..#/.../#.. => ..##/.#../##.#/##..
#.#/.../#.. => ..#./..../#.../...#
.##/.../#.. => .##./..##/####/#...
###/.../#.. => #.##/..../##../#.##
.##/#../#.. => .###/...#/###./....
###/#../#.. => .#.#/#.#./#.##/..#.
..#/.#./#.. => ...#/..#./..##/.#.#
#.#/.#./#.. => #.../##.#/.###/#.#.
.##/.#./#.. => ###./####/#..#/##.#
###/.#./#.. => ..../..#./..../#...
.##/##./#.. => .#.#/.##./.#.#/#.##
###/##./#.. => ..../##../###./.#.#
#../..#/#.. => ...#/#.../#.##/.###
.#./..#/#.. => #..#/.#../###./#.#.
##./..#/#.. => #.#./..#./###./###.
#.#/..#/#.. => .#.#/##.#/##../####
.##/..#/#.. => ###./..../.#../...#
###/..#/#.. => #.#./.##./.#.#/#..#
#../#.#/#.. => #.#./##.#/.#../.###
.#./#.#/#.. => ##.#/#.#./#.../####
##./#.#/#.. => .#.#/#.../..#./#.##
..#/#.#/#.. => ##.#/.##./#.../.###
#.#/#.#/#.. => ..##/..../..../####
.##/#.#/#.. => ####/#.#./###./.#.#
###/#.#/#.. => #.##/..#./##../#...
#../.##/#.. => ..##/##.#/####/.#..
.#./.##/#.. => ..##/##../.#../..##
##./.##/#.. => ..##/.#.#/#..#/....
#.#/.##/#.. => #.../##../...#/.#.#
.##/.##/#.. => ##../...#/.###/.#.#
###/.##/#.. => ####/..#./.##./#.##
#../###/#.. => .#.#/##.#/#.#./#.#.
.#./###/#.. => .###/#..#/.#.#/###.
##./###/#.. => ##../.#../###./.#.#
..#/###/#.. => #.##/..../...#/..#.
#.#/###/#.. => #.../#..#/..../.#..
.##/###/#.. => ####/#..#/..#./.#.#
###/###/#.. => .##./##../.#../..#.
.#./#.#/.#. => #.#./.###/#.#./..##
##./#.#/.#. => .##./..../..##/##..
#.#/#.#/.#. => ...#/..../.#.#/..##
###/#.#/.#. => .#../####/#.#./#.##
.#./###/.#. => #..#/.#.#/#..#/#.#.
##./###/.#. => .#../##../#..#/..##
#.#/###/.#. => #.#./.##./##.#/.#.#
###/###/.#. => #.#./...#/..##/#...
#.#/..#/##. => ..#./..#./...#/#..#
###/..#/##. => #..#/###./..../##.#
.##/#.#/##. => #.##/.#.#/...#/..##
###/#.#/##. => #.##/...#/.##./.###
#.#/.##/##. => ..../##.#/..../...#
###/.##/##. => .###/#.../###./###.
.##/###/##. => #.../#.#./.###/..#.
###/###/##. => #.##/.#../..#./.#.#
#.#/.../#.# => .##./##../###./.###
###/.../#.# => ..##/...#/###./.#..
###/#../#.# => ##.#/..#./#.##/.#..
#.#/.#./#.# => .#../#.##/...#/###.
###/.#./#.# => ..#./..../####/####
###/##./#.# => ###./#..#/..../#..#
#.#/#.#/#.# => ##.#/###./..../#...
###/#.#/#.# => ##../.###/#..#/.#..
#.#/###/#.# => #.../###./.###/..#.
###/###/#.# => ..../.##./.#../###.
###/#.#/### => ##../#.../.###/#...
###/###/### => .###/###./#.##/..#.`;
